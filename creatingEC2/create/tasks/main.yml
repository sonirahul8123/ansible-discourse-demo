- name: Installing python libraries
  pip:
    name: boto, boto3, botocore

- name: Create security group
  ec2_group:
    name: "{{ project_name }}_security_group"
    description: "{{ project_name }} security group"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ region }}"
    rules:
    - proto: tcp  # ssh
      from_port: 22
      to_port: 22
      cidr_ip: 0.0.0.0/0
    - proto: tcp  # http
      from_port: 80
      to_port: 80
      cidr_ip: 0.0.0.0/0
    - proto: tcp  # https
      from_port: 443
      to_port: 443
      cidr_ip: 0.0.0.0/0
    - proto: tcp  # postgresql
      from_port: 5432
      to_port: 5432
      cidr_ip: 0.0.0.0/0
    - proto: tcp  # redis
      from_port: 6379
      to_port: 6379
      cidr_ip: 0.0.0.0/0
    rules_egress:
    - proto: all
      cidr_ip: 0.0.0.0/0
  register: my_firewall

- name: Create a hosted zone
  route53_zone:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    zone: "{{ zone_name }}"
    comment: discourse domain

- name: Retrieve the details of created zone
  route53:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    state: get
    zone: "{{ zone_name }}"
    type: NS
    record: "{{ zone_name }}"
  register: myzone

- debug: var=myzone.nameservers

- name: Copy list of nameservers in a file
  lineinfile:
    path: "{{ ns_file }}"
    create: yes
    line: "{{ myzone.nameservers }}"

- name: Create an EC2 key
  ec2_key:
    name: "{{ project_name }}-{{ name }}-key"
    region: "{{ region }}"
  register: ec2_key

- name: Save private key
  copy: content="{{ ec2_key.key.private_key }}" dest="../aws-private.pem" mode=0600
  when: ec2_key.changed

- name: Create an EC2 instance
  ec2:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    key_name: "{{ project_name }}-{{ name }}-key"
    region: "{{ region }}"
    group_id: "{{ my_firewall.group_id }}"
    instance_type: "{{ instance_type }}"
    image: "{{ ami }}"
    wait: yes
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: 30
        delete_on_termination: true
    instance_tags:
      Name: "{{ name }}"
    count_tag: name
    exact_count: 1
    vpc_subnet_id: '{{ mysubnet_id }}'
    assign_public_ip: yes
  register: ec2

- name: Allocating elastic IP to instance
  ec2_eip:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    in_vpc: yes
    reuse_existing_ip_allowed: yes
    state: present
    region: "{{ region }}"
    instance_id: "{{ ec2.instance_ids[0] }}"
  register: instance_eip

- name: Copy elastic IP to file
  copy:
    content: "{{ instance_eip.public_ip }}"
    dest: /tmp/elastic_ip

- debug: var=instance_eip.public_ip

- name: Add the newly created EC2 instance(s) to host group
  lineinfile:
    dest: "{{ hostpath }}"
    regexp: "{{ instance_eip.public_ip }}"
    insertafter: "[discourse]"
    line: "{{ instance_eip.public_ip }} {{hoststring}}"
    state: present
  with_items: "{{ ec2.instances }}"

- wait_for: path={{ hostpath }} search_regex={{hoststring}}

- name: Wait for SSH to come up
  local_action: wait_for
                host={{ instance_eip.public_ip }}
                port=22
                state=started
  with_items: "{{ ec2.instances }}"

- name: Add IP to ec2_hosts group
  add_host: hostname={{ instance_eip.public_ip }} groups=ec2_hosts
  with_items: "{{ ec2.instances }}"

- name: Add an A record and wait until the changes have been replicated
  route53:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    state: present
    zone: "{{ zone_name }}"
    record: "{{ record_name }}"
    type: A
    ttl: "{{ ttl_value }}"
    value: "{{ instance_eip.public_ip }}"
    wait: yes
